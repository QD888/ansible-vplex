# VPlex Provisioning

---
- name: Perform VPlex provisioning
  hosts: localhost
  connection: local

  vars_files:
    - vars/connection.yml
    - vars/credentials.yml
    - vars/input_provisioning.yml

  vars:
    input: &connection_vars
      vplexhost: "{{ vplexhost }}"
      vplexuser: "{{ vplexuser }}"
      vplexpassword: "{{ vplexpassword }}"
      verifycert: "{{ verifycert }}"

  tasks:
    - name: Rediscover StorageArray
      dellemc_vplex_array:
        <<: *connection_vars
        cluster_name: "{{ cluster_name }}"
        array_name: "{{ array_name }}"
        rediscover: true
      register: array_details

    - name: Get list of all storage volumes in a given cluster
      dellemc_vplex_gatherfacts:
        <<: *connection_vars
        cluster_name: "{{ cluster_name }}"
        gather_subset:
          - stor_vol
      register: volume_list

    - name: Get details of all storage volumes
      dellemc_vplex_storage_volume:
        <<: *connection_vars
        cluster_name: "{{ cluster_name }}"
        storage_volume_name: "{{ item }}"
        get_itls: false
        state: present
      loop: "{{ volume_list.StorageVolumes }}"
      register: storage_vols

    - name: Set empty volumes list
      set_fact:
        volumes: []

    - name: Get unclaimed storage volumes
      set_fact:
        volumes: "{{ volumes + [item.storage_details.name] }}"
      loop: "{{ storage_vols.results }}"
      # get unclaimed volumes from array
      when: (item.storage_details.use == 'unclaimed') and
            (item.storage_details.storage_array_name == array_name)

    - name: Claim first 2 Storage Volumes
      dellemc_vplex_storage_volume:
        <<: *connection_vars
        cluster_name: "{{ cluster_name }}"
        storage_volume_id: "{{ item }}"
        new_storage_volume_name: "sv_{{ ansible_date_time.epoch }}_{{ index }}"
        claimed_state: "claimed"
        state: "present"
      loop: "{{ volumes[0:2] }}"
      loop_control:
        index_var: index
      register: volume

    - name: Get the storage volumes names
      set_fact:
        stor_vol: "{{ volume['results'] | map(attribute=
          'storage_details.name') | list }}"

    - name: Create extents
      dellemc_vplex_extent:
        <<: *connection_vars
        cluster_name: "{{ cluster_name }}"
        storage_volume_name: "{{ item }}"
        extent_name: "extent_ps_{{ cluster_name }}_{{ index }}"
        state: "present"
      loop: "{{ stor_vol }}"
      loop_control:
        index_var: index
      register: extent_det

    - name: Get the extent names
      set_fact:
        extent: "{{ extent_det['results'] | map(attribute=
          'extent_details.name') | list }}"

    - name: Create device
      dellemc_vplex_device:
        <<: *connection_vars
        cluster_name: "{{ cluster_name }}"
        device_name: "{{ extent[0] }}_dev_1"
        extents: "{{ extent }}"
        extent_state: "present-in-device"
        geometry: "{{ geometry }}"
        state: "present"
      register: device_det

    - name: Get device details
      dellemc_vplex_device:
        <<: *connection_vars
        cluster_name: "{{ cluster_name }}"
        device_name: "{{ device_det.device_details.name }}"
        state: 'present'
      register: get_device
      until: get_device.device_details.rebuild_status != "rebuilding"
      retries: 100
      delay: 5

    - name: Create virtual volume
      dellemc_vplex_virtual_volume:
        <<: *connection_vars
        cluster_name: "{{ cluster_name }}"
        virtual_volume_name: "{{ device_det.device_details.name }}_loc_vol"
        supporting_device_name: "{{ device_det.device_details.name }}"
        thin_enable: true
        state: "present"
      register: virt_vol

    - name: Register initiator
      dellemc_vplex_initiator:
        <<: *connection_vars
        cluster_name: "{{ cluster_name }}"
        initiator_name: "{{ initiator_name }}"
        port_wwn: "{{ port_wwn }}"
        registered: true
        state: "present"
      register: initiator

    - name: Create Storage View
      dellemc_vplex_storage_view:
        <<: *connection_vars
        cluster_name: "{{ cluster_name }}"
        storage_view_name: "{{ storage_view_name }}"
        ports: "{{ port_name }}"
        initiators: "{{ initiator_name }}"
        initiator_state: "present-in-view"
        virtual_volumes: "{{ virt_vol.storage_details.name }}"
        virtual_volume_state: "present-in-view"
        state: "present"
      register: storage_view
